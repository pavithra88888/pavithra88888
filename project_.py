# -*- coding: utf-8 -*-
"""project .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1om0y-TKbO65TjSAmBSuIWnggKuYJvFUB

📘 SECTION 1: Import Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import joblib
import io
from google.colab import files

"""📘 SECTION 2: Upload and Load Dataset


"""

from google.colab import drive
drive.mount('/content/drive')

# Upload dataset
uploaded = files.upload()

# Get uploaded filename dynamically
file_name = next(iter(uploaded))

# Load Excel file
df = pd.read_excel(io.BytesIO(uploaded[file_name]), engine='openpyxl')

# Display first few rows
df.head()

"""📘 SECTION 3: Clean and Prepare Data


"""

# Replace invalid AQI values and convert to numeric
df['AQI'] = pd.to_numeric(df['AQI'], errors='coerce')

# Drop rows with missing AQI
df = df.dropna(subset=['AQI'])

# Drop unnecessary columns
df = df.drop(['City', 'Latitude', 'Longitude', 'Time'], axis=1)

# Fill other missing values with column means
df = df.fillna(df.mean(numeric_only=True))

"""📘 SECTION 4: Define AQI Categories for Classification

"""

def aqi_category(aqi):
    if aqi <= 50:
        return 'Good'
    elif aqi <= 100:
        return 'Moderate'
    elif aqi <= 150:
        return 'Unhealthy for Sensitive Groups'
    elif aqi <= 200:
        return 'Unhealthy'
    elif aqi <= 300:
        return 'Very Unhealthy'
    else:
        return 'Hazardous'

# Apply categorization
df['AQI_Category'] = df['AQI'].apply(aqi_category)

"""📘 SECTION 5: Train/Test Split and Feature Scaling


"""

# Split into features and labels
X = df.drop(['AQI', 'AQI_Category'], axis=1)
y = df['AQI_Category']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""📘 SECTION 6: Train Classification Model


"""

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

"""
📘 SECTION 7: Evaluate Model

"""

y_pred = model.predict(X_test_scaled)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

"""
📘 SECTION 8: Save Model and Scaler

"""

joblib.dump(model, 'aqi_rf_model.pkl')
joblib.dump(scaler, 'aqi_scaler.pkl')
print("✅ Model and scaler saved for future deployment.")

"""📘 SECTION 9: Download Saved Files (Optional)


"""

files.download('aqi_rf_model.pkl')
files.download('aqi_scaler.pkl')

# Load the uploaded Excel file using pandas
import io

# Extract the file name dynamically
file_name = next(iter(uploaded))

# Read the Excel file (openpyxl engine is required)
df = pd.read_excel(io.BytesIO(uploaded[file_name]), engine='openpyxl')

# Display first few rows to verify successful load
df.head()

"""📘 Section 10: Deployment Using Gradio

"""

# Install Gradio (run only once)
!pip install gradio

import gradio as gr
import pandas as pd
import joblib

# Load the saved model and scaler
model = joblib.load('aqi_rf_model.pkl')
scaler = joblib.load('aqi_scaler.pkl')

# Define prediction function
def predict_aqi(pm25, pm10, o3, no2, so2, co):
    # Prepare input as DataFrame
    input_data = pd.DataFrame([[pm25, pm10, o3, no2, so2, co]],
                              columns=['PM2.5', 'PM10', 'O3', 'NO2', 'SO2', 'CO'])

    # Scale input
    scaled_input = scaler.transform(input_data)

    # Predict
    prediction = model.predict(scaled_input)[0]
    return f"Predicted AQI Category: {prediction}"

# Define Gradio interface
iface = gr.Interface(
    fn=predict_aqi,
    inputs=[
        gr.Number(label="PM2.5"),
        gr.Number(label="PM10"),
        gr.Number(label="O3"),
        gr.Number(label="NO2"),
        gr.Number(label="SO2"),
        gr.Number(label="CO")
    ],
    outputs=gr.Textbox(label="AQI Prediction"),
    title="🌫️ Air Quality Level Predictor",
    description="Enter air pollutant levels to predict the AQI category using a trained machine learning model."
)

# Launch the app
iface.launch()